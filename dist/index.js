#!/usr/bin/env node
"use strict";var St=Object.create;var Q=Object.defineProperty;var wt=Object.getOwnPropertyDescriptor;var _t=Object.getOwnPropertyNames;var Ct=Object.getPrototypeOf,Rt=Object.prototype.hasOwnProperty;var $t=(t,e)=>{for(var o in e)Q(t,o,{get:e[o],enumerable:!0})},Ce=(t,e,o,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of _t(e))!Rt.call(t,s)&&s!==o&&Q(t,s,{get:()=>e[s],enumerable:!(r=wt(e,s))||r.enumerable});return t};var d=(t,e,o)=>(o=t!=null?St(Ct(t)):{},Ce(e||!t||!t.__esModule?Q(o,"default",{value:t,enumerable:!0}):o,t)),Et=t=>Ce(Q({},"__esModule",{value:!0}),t);var pn={};$t(pn,{initUsefulTasks:()=>q,usefulTasks:()=>_e});module.exports=Et(pn);var kt=d(require("path"));var Ee=require("commander"),Fe=d(require("path"));var Re="0.3.0";var At="useful_tasks.json",$e=!0,M="restore",$="keep",jt=[M,$],Dt="info",Lt="debug",It="none",P=[It,Dt,Lt],Gt={cwdMode:`Choose between ${jt.map(t=>`'${t}'`).join(" or ")}. If you use 'cwd' property in a specific task, consider using this parameter. This parameter determines the behavior of the current working directory (CWD) when each task ends. In '${M}' mode, the CWD will be restored to its original state (or the one specified at --cwd) when each task ends, while in '${$}' mode, the CWD will remain unchanged.`},ee=t=>{let e=new Ee.Command;e.name("useful-tasks").version(Re).option("--cwd <string>","Change working directory").option("-c, --config <string>","A path of json configuraion",At).option("-i, --include <items>","Include tasks that contain at least one of the specified parameters. Specify the IDs or tags separated by commas. For example: my_task_01, my_task_02").option("-a, --include-cta <items>","Include tasks that contain all of the specified parameters. Specify the IDs or tags separated by commas. For example: my_task_01, my_task_02").option("-e, --exclude <items>","Exclude tasks that contain at least one of the specified parameters. Specify the IDs or tags separated by commas. For example: my_task_01, my_task_02").option("-x, --exclude-cta <items>","Exclude tasks that contain all of the specified parameters. Specify the IDs or tags separated by commas. For example: my_task_01, my_task_02").option("--camel-keys <boolean>",'Specify whether to use camel case for the key of the variable. If the value is true, the paramter "--var-my-key" will be converted to "myKey" otherwise it will be "my-key"',$e).option("--cwd-mode <string>",Gt.cwdMode).option("--log-level <string>",`Specify the logging level as ${P.join(",")}. This parameter takes higher priority than the 'json' configuration.`).allowUnknownOption(!0),t!==void 0?e.parse(t,{from:"user"}):e.parse();let r=e.opts();if(r.include=Y(r.include),r.includeCta=Y(r.includeCta),r.exclude=Y(r.exclude),r.excludeCta=Y(r.excludeCta),r.camelKeys!==void 0&&typeof r.camelKeys=="string"){let s=r.camelKeys;s=s.trim().toLowerCase(),s==="false"||s==="0"||s==="no"?r.camelKeys=!1:s==="true"||s==="1"||s==="yes"?r.camelKeys=!0:r.camelKeys=$e}return r.extraArgs=[...e.args??[]],r.cwd&&process.chdir(Fe.default.resolve(r.cwd)),{opt:r,program:e}},Y=(t,e=!0)=>{if(!t)return[];if(typeof t=="string"){let o=[];return t.split(",").forEach(s=>{let i=s.trim();e?i.length>0&&o.push(i):o.push(i)}),o}return[]};var ce=d(require("path"));var pe=d(require("fs")),fe=d(require("path")),Pe=d(require("json5"));var se=d(require("debug"));var n=require("zod"),De=d(require("os")),te="\\$\\{([a-zA-Z0-9\\.\\-_]*)\\}",I=(t,e)=>Ie.extend({type:n.z.literal(t),...e}),ne=n.z.union([n.z.string().nonempty(),n.z.array(n.z.string().nonempty())]).optional(),xn=n.z.object({include:ne,exclude:ne}),N=(t,e)=>Ie.extend({type:n.z.literal(t),...e,include:ne,exclude:ne}),Le=t=>({...t,__compare__elements:[]});var Vt=n.z.union([n.z.literal("git-setup"),n.z.literal("cmd"),n.z.literal("set-var"),n.z.literal("output"),n.z.literal("symlink"),n.z.literal("fs-copy"),n.z.literal("fs-del"),n.z.literal("fs-mkdir"),n.z.literal("env-var"),n.z.literal("sub-tasks"),n.z.literal("content-replace")]),Oe=["aix","android","darwin","freebsd","haiku","linux","openbsd","sunos","win32","cygwin","netbsd"],Tn=[...Oe,...Oe.map(t=>`!${t}`)],Ae=["arm","arm64","ia32","mips","mipsel","ppc","ppc64","s390","s390x","x64"],kn=[...Ae,...Ae.map(t=>`!${t}`)],je=["arm","arm64","aarch64","mips","mips64","ppc64","ppc64le","s390","s390x","i386","i686","x86_64"],bn=[...je,...je.map(t=>`!${t}`)];De.default.machine();var Mt=n.z.object({platform:n.z.custom().optional(),architecture:n.z.custom().optional(),machine:n.z.custom().optional()}),Ie=n.z.object({type:Vt,id:n.z.string().trim().nonempty().optional(),tags:n.z.union([n.z.string().trim().nonempty(),n.z.array(n.z.string().trim().nonempty())]).optional().transform(t=>t?typeof t=="string"?[t]:t:[]),cwd:n.z.string().nonempty().optional(),enabled:n.z.boolean().default(!0),when:Mt.optional(),comment:n.z.string().optional(),onError:n.z.union([n.z.literal("skip"),n.z.literal("throw"),n.z.literal("warn")]).default("throw")}),Pt=I("git-setup",{localPath:n.z.string().nonempty(),binary:n.z.string().nonempty().optional(),url:n.z.string().nonempty().optional(),branch:n.z.string().nonempty().optional(),startPoint:n.z.string().nonempty().optional(),updateSubmodules:n.z.union([n.z.string().nonempty(),n.z.string().nonempty(),n.z.boolean()]).optional()}),Nt=I("symlink",{type:n.z.literal("symlink"),target:n.z.string().nonempty(),path:n.z.string().nonempty(),linkType:n.z.union([n.z.literal("dir"),n.z.literal("file"),n.z.literal("junction")]).optional(),forced:n.z.boolean().optional()}),Wt=I("cmd",{cmd:n.z.string(),shell:n.z.string().optional()}),zt=N("set-var",{key:n.z.string().nonempty(),value:n.z.union([n.z.string(),n.z.number(),n.z.boolean(),n.z.any()]),src:n.z.string().nonempty().optional(),parser:n.z.union([n.z.literal("json"),n.z.literal("lines"),n.z.literal("string"),n.z.literal("auto")]).optional(),isFallback:n.z.boolean().optional().describe("If the variable already exists, assigning will be skipped")}),Ut=N("env-var",{map:n.z.map(n.z.string(),n.z.union([n.z.string(),n.z.number(),n.z.boolean()])).optional(),src:n.z.string().nonempty().optional(),parser:n.z.union([n.z.literal("json"),n.z.literal("lines"),n.z.literal("auto")]).default("auto"),isFallback:n.z.boolean().optional().describe("If the environment variable already exists, assigning will be skipped")}),Kt=n.z.union([n.z.literal("console").describe("Output to console"),n.z.literal("file-write").describe("Output to file (overwriting)"),n.z.literal("file-append").describe("Output to file (appending)"),n.z.literal("c").describe("Output to console"),n.z.literal("fw").describe("Output to file (overwriting)"),n.z.literal("fa").describe("Output to file (appending)")]),Jt=I("output",{target:Kt,text:n.z.string(),path:n.z.string().nonempty().optional()}),Ht=n.z.object({conflict:n.z.union([n.z.literal("overwrite"),n.z.literal("skip")]).default("overwrite")}),Bt=N("fs-copy",{src:n.z.string().nonempty(),dest:n.z.string().nonempty(),options:Ht.default({conflict:"overwrite"})}),qt=N("fs-del",{path:n.z.string().nonempty()}),Xt=I("fs-mkdir",{path:n.z.string().nonempty()}),Zt=I("sub-tasks",{args:n.z.string().optional(),inherits:n.z.object({args:n.z.boolean().default(!0),vars:n.z.boolean().default(!0)}).optional().describe("Whether to inherit args and vars from the parent task.")}),Qt=n.z.object({pattern:n.z.string(),flags:n.z.string().optional()}),Yt=n.z.union([n.z.string().nonempty(),Qt]),en=N("content-replace",{path:n.z.string().nonempty().describe(`If the task includes 'include' or 'exclude',       it will be handled as a directory. 
      Otherwise, it will be processed as a file.`),find:Yt,replace:n.z.string(),loop:n.z.number().optional()}),tn=n.z.union([Pt,Wt,zt,Ut,Jt,Bt,qt,Xt,Nt,Zt,en]),Ge=n.z.object({name:n.z.string().optional(),env:n.z.object({logLevel:n.z.enum(P).default("info"),varReplaceRegex:n.z.string().nonempty().default(te).describe("The regex to replace text with variable values").refine(t=>t.indexOf("(")>=0&&t.indexOf(")")>=0,{message:"The Regex must contains regex group express '(' and ')'"}),envReplaceRegex:n.z.string().nonempty().default(te).describe("The regex to replace text with environment variable values").refine(t=>t.indexOf("(")>=0&&t.indexOf(")")>=0,{message:"The Regex must contains regex group express '(' and ')'"}),cwdMode:n.z.union([n.z.literal(M),n.z.literal($)]).default(M)}).default({logLevel:"info",varReplaceRegex:te,envReplaceRegex:te}),tasks:n.z.array(tn).default([])}),le="useful-tasks",re=`${le}:debug`,W=`${le}:info`,z=`${le}:warn`,Ve="--var-",Me="--env-";var oe=(0,se.default)(z),w=(0,se.default)(W),a=(0,se.default)(re);var Ne=require("es-toolkit/compat"),U=t=>{if(a(`Loading file: ${t}`),!pe.default.existsSync(t))throw new Error(`ERROR: The Path '${t}' does not exists!`);return pe.default.readFileSync(t,{encoding:"utf-8"})},nn=t=>K(U(t)),K=t=>Pe.default.parse(t),me=t=>{let e=nn(t);if(e.extends){let o=fe.default.dirname(t),r=fe.default.resolve(o,e.extends);e=(0,Ne.assignIn)({},e,me(r))}return e},ue=(t,e)=>{if(!e)return t;let o="",r=t.split("-");for(let s=0;s<r.length;s++){let i=r[s];s===0?o=i:(i.length>0&&(i=`${i[0].toUpperCase()}${i.substring(1)}`),o=`${o}${i}`)}return o},de=(t,e)=>{if(t.length<1)return!1;for(let o of t)if(e){for(let r of e)if(o===r)return!0}return!1},ge=(t,e)=>{if(t.length<1)return!1;for(let o of t){let r=!1;if(e){for(let s of e)if(s===o){r=!0;break}}if(!r)return!1}return!0},We=(t,e)=>{if(!e)throw new Error(`The '${t}' property must not be empty.`)},R=(t,e)=>{t[e]!==void 0&&oe(`The key '${e}' has been deprecated.`)},rn=(t,e)=>e.length<=0?!0:e.includes(typeof t),E=(t,e,o)=>{if(rn(e,o))return!0;let r=typeof e;throw new Error(`The '${t}' property has an invalid type '${r}' with the value '${e}'. The allowed types are [${o}].`)},sn=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/gm;function J(t){let e={},o=t.toString();o=o.replace(/\r\n?/gm,`
`);let r;for(;(r=sn.exec(o))!=null;){let s=r[1],i=r[2]||"";i=i.trim();let m=i[0];i=i.replace(/^(['"`])([\s\S]*)\1$/gm,"$2"),m==='"'&&(i=i.replace(/\\n/g,`
`),i=i.replace(/\\r/g,"\r")),e[s]=i}return e}var ie=(t,e)=>{throw new Error(`The parameter '${String(e)}' has an invalid value ${t[e]}`)},b=(t,e)=>{if(t!=null){if(typeof t=="string")return[t];if(Array.isArray(t))return t.filter(o=>typeof o=="string")}return e};var ht=d(require("debug")),xt=d(require("os"));var F=require("es-toolkit/compat"),ze=async(t,e)=>{let o=e;for(let r of Object.keys(o))if(typeof r=="string"&&!(r==="id"||r==="tags")&&o[r]!==void 0&&typeof o[r]=="string"){let s=o[r];for(;;){let i=f=>{t.envVarReplaceRegex.lastIndex=0;let l=t.envVarReplaceRegex.exec(f),y=(0,F.isNotNil)(l),T=l?.[0],v=l?.[1],C=v?(0,F.get)(process.env,v):void 0;return{isMatched:y,matchedStr:T,varPath:v,matchedVar:C,replaceText:()=>{let u=f.substring(0,l.index),k=`${C}`,D=f.substring(l.index+T.length);return`${u}${k}${D}`}}},g=(f=>{t.varReplaceRegex.lastIndex=0;let l=t.varReplaceRegex.exec(f),y=(0,F.isNotNil)(l),T=l?.[0],v=l?.[1],C=v?(0,F.get)(t.systemVars,v)||(0,F.get)(t.vars,v):void 0;return{isMatched:y,matchedStr:T,varPath:v,matchedVar:C,replaceText:()=>{let u=f.substring(0,l.index),k=`${C}`,D=f.substring(l.index+T.length);return`${u}${k}${D}`}}})(s),c=i(s);if(g.isMatched)a(`Variable injection: '${r}'=>'${s}'`),s=g.replaceText();else if(c.isMatched)a(`Variable injection: '${r}'=>'${s}'`),s=c.replaceText();else break}o[r]=s}},ye=(t,e,o,r)=>{let s,i=!1;for(let m of t){if(m.trim()==="--"){a("Stop parsing by '--'");break}if(i&&s){let c=m.startsWith("-")?"":m;r(s,c),s=void 0,i=!1}else if(m.indexOf(e)>=0){let f=m.indexOf("=");if(f>=0){let l=ue(m.substring(e.length,f),o),y=m.substring(f+1);r(l,y)}else s=ue(m.substring(e.length),o),i=!0}}},H=(t,e,o,r)=>{if(r&&t.vars[e]!==void 0){a(`Skips assigning the variable ${e}=${o} because it already exists.`);return}a(`Sets the variable ${e}=${o}`),t.vars[e]=o},B=(t,e,o,r)=>{var s=typeof o;if(s!=="string"&&s!=="number"&&s!=="boolean")a(`Ignoring the invalid typed(${s}) environment variable ${e}=${o}`);else if(String(o).length<1)a(`Ignoring the invalid environment variable ${e}=${o}`);else{if(r&&process.env[e]!==void 0){a(`Skips assigning the environment variable ${e}=${o} because it already exists.`);return}a(`Sets the environment variable ${e}=${o}`),process.env[e]=String(o)}};var Ue=d(require("string-argv"));var Ke=async(t,e)=>{if(!e.args||typeof e.args!="string")throw new Error("Found missing or invalid property 'args' that is required");let o=(0,Ue.default)(e.args),r=ee(o);q(t.originCwd,r.opt,r.program)};var G=d(require("fs")),he=d(require("path"));var Je=d(require("fs")),X=require("glob"),_=(t,e,o,r,s,i)=>{if(Je.default.statSync(e).isDirectory()===!1)return!1;let m=s===!0,g=o.length>0,c=r.length>0;return!g&&c?(t((0,X.globSync)(["**"],{ignore:[...r],cwd:e,nodir:m}).filter(f=>f!==".")),!0):g&&!c?(t((0,X.globSync)(o,{cwd:e,nodir:m})),!0):g&&c?(t((0,X.globSync)(o,{ignore:r,cwd:e,nodir:m})),!0):i?(t((0,X.globSync)(["**"],{cwd:e,nodir:m}).filter(f=>f!==".")),!0):!1};var on=(t,e,o,r)=>{var s=t;if(r<1)for(;e.test(s);)s=s.replace(e,o);else for(var i=0;i<r;i++)e.test(s)&&(s=s.replace(e,o));return s},an=(t,e,o,r)=>{var s=t;if(r<1)for(;s.indexOf(e)>=0;)s=s.replace(e,o);else for(var i=0;i<r;i++)s.indexOf(e)>=0&&(s=s.replace(e,o));return s},cn=t=>t!=null&&typeof t=="object"&&"pattern"in t&&typeof t.pattern=="string",He=(t,e,o,r,s)=>{a(`Find and Replace: ${t}`);let i=G.default.readFileSync(t,"utf-8"),m=e(i,o,r,s);G.default.writeFileSync(t,m,"utf-8")},Be=async(t,e)=>{if(!G.default.existsSync(e.path)){a(`The '${e.path}' does not exist`);return}(e.replace===void 0||typeof e.replace!="string")&&ie(e,"replace");let o=e.loop===void 0||e.loop===null?1:e.loop;typeof o=="string"?o=parseInt(o,10):typeof o!="number"&&ie(e,"loop");let r,s;if(cn(e.find)){let g=e.find;r=new RegExp(g.pattern,g.flags),s=on}else if(typeof e.find=="string")r=e.find,s=an;else{ie(e,"find");return}_(g=>{for(let c of g){let f=he.default.join(e.path,c);G.default.existsSync(f)&&G.default.statSync(f).isDirectory()||He(he.default.join(e.path,c),s,r,e.replace,o)}},e.path,b(e.include,[]),b(e.exclude,[]),!0,!0)||He(e.path,s,r,e.replace,o)};var qe=require("fs-extra");var Xe=async(t,e)=>{E("path",e.path,["string"]),a(`Make a directory at : ${e.path}`),(0,qe.mkdirpSync)(e.path)};var Qe=d(require("fs")),Ye=d(require("path")),et=d(require("fs-extra"));var Ze=t=>{a(`Delete: ${t}`),et.default.removeSync(t)},tt=async(t,e)=>{if(!Qe.default.existsSync(e.path)){a(`The '${e.path}' does not exist and cannot be deleted`);return}_(s=>{for(let i of s)Ze(Ye.default.join(e.path,i))},e.path,b(e.include,[]),b(e.exclude,[]),!1,!1)||Ze(e.path)};var xe=d(require("path"));var Te=d(require("fs-extra"));var nt=(t,e,o)=>{a(`Copy: ${t} => ${e}`),Te.default.copySync(t,e,o)},rt=async(t,e)=>{if(!Te.default.existsSync(e.src))throw new Error(`The source '${e.src}' does not exist`);let o=e?.options?.conflict,r=o==null||typeof o=="string"&&o.trim()==="overwrite";e.options&&"overwrite"in e?.options&&typeof e?.options?.overwrite=="boolean"&&(r=e.options.overwrite);let s={overwrite:r};_(g=>{for(let c of g){let f=xe.default.join(e.src,c),l=xe.default.join(e.dest,c);nt(f,l,s)}},e.src,b(e.include,[]),b(e.exclude,[]),!1,!1)||nt(e.src,e.dest,s)};var V=d(require("fs")),st=require("fs-extra"),ke=d(require("path")),ot=async(t,e)=>{let o=e.text??"",r=(e.target??"c").trim(),s=e.path;if(r==="c"||r==="console")console.log(o);else{if(!s)throw new Error(`The parameter 'path' is required for a target '${r}'!`);let i=ke.default.resolve(s),m=ke.default.dirname(i);if(V.default.existsSync(m)||(0,st.mkdirpSync)(m),r=="fa"||r=="file-append"){let g,c;try{c=V.default.openSync(i,"a"),V.default.appendFileSync(c,o,"utf8")}catch(f){g=f}finally{c!==void 0&&V.default.closeSync(c)}if(g)throw g}else V.default.writeFileSync(i,o)}};var it=d(require("fs-extra")),be=d(require("path"));var at=require("es-toolkit"),ct=async(t,e)=>{R(e,"var"),R(e,"varType"),R(e,"fileFormat"),e.isFallback!==!0&&(e.isFallback=!1);let o=e.isFallback;if((0,at.isNotNil)(e.map)){let c=e.map;typeof c=="string"?(a("Trying to parse as lines."),c=J(c)):(typeof c=="object"||Array.isArray(c))&&Object.keys(c).forEach(f=>{B(t,f,c[f],o)})}if(!e.src)return;E("src",e.src,["string"]);let r=e.src,s=e.parser||"auto";a(`Parser = ${s}`);let i=c=>{let f=be.default.resolve(c),l,y=U(f);if(s==="auto"||s==="json")try{a("Trying to parse as JSON."),l=K(y)}catch(T){if(s==="json")throw T}if(!l&&(s==="auto"||s==="lines")&&(a("Trying to parse as lines."),l=J(y)),l){let T=l;Object.keys(T).forEach(v=>{B(t,v,T[v],o)})}};_(c=>{for(let f of c){let l=be.default.join(r,f);it.default.statSync(l).isDirectory()||i(l)}},r,b(e.include,[]),b(e.exclude,[]),!0,!0)||i(r)};var lt=d(require("fs")),ve=d(require("path"));var pt=async(t,e)=>{R(e,"var"),R(e,"varType"),R(e,"fileFormat"),E("key",e.key,["string"]),We("key",e.key),e.isFallback!==!0&&(e.isFallback=!1);let o=e.isFallback;if(e.value!==void 0){let c=e.value;H(t,e.key,c,o)}if(!e.src)return;E("src",e.src,["string"]);let r=e.src,s=e.parser||"auto";a(`Parser = ${s}`);let i=c=>{let f=ve.default.resolve(c),l,y=U(f);if(s==="auto"||s==="json")try{a("Trying to parse as JSON."),l=K(y)}catch(T){if(s==="json")throw T}!l&&(s==="auto"||s==="lines")&&(a("Trying to parse as lines."),l=J(y)),!l&&(s==="auto"||s==="string")&&(l=y),H(t,e.key,l,o)};_(c=>{for(let f of c){let l=ve.default.join(r,f);lt.default.statSync(l).isDirectory()||i(l)}},r,b(e.include,[]),b(e.exclude,[]),!0,!0)||i(r)};var ft=require("child_process");var mt=async(t,e)=>{a(`Start execution... ${e.cmd}`),(0,ft.execSync)(e.cmd,{shell:e.shell,env:process.env,stdio:[process.stdin,process.stdout,process.stderr],encoding:"utf-8"})};var Se=d(require("path")),O=d(require("fs")),ut=d(require("fs-extra"));var dt=async(t,e)=>{let o=Se.default.resolve(e.target),r=Se.default.resolve(e.path);if(O.default.existsSync(r)){let s=O.default.lstatSync(r);a(`LSTAT is symlink? ${s.isSymbolicLink()}, is directory? ${s.isDirectory()}`),e.forced&&(s.isSymbolicLink()||s.isFile()?(a(`Unlink ${r}`),O.default.unlinkSync(r)):s.isDirectory()&&(a(`Remove directory '${r}'`),ut.default.removeSync(r)))}if(O.default.existsSync(r))a(`Could not create symbolic link cause '${r}' already exists`);else{a(`Create symbolic link ${o} => ${r}`),O.default.symlinkSync(o,r,e.linkType);let s=O.default.lstatSync(r);a(`LSTAT is symlink? ${s.isSymbolicLink()}, is directory? ${s.isDirectory()}`)}};var ae=d(require("fs")),gt=d(require("path")),A=d(require("simple-git")),yt=async(t,e)=>{let o=gt.default.resolve(e.localPath);ae.default.existsSync(o)||ae.default.mkdirSync(o,{recursive:!0}),ae.default.readdirSync(o).length===0&&e.url&&await(0,A.default)().clone(e.url,o);let r=(0,A.default)(o,{binary:e.binary});if(!await r.checkIsRepo(A.CheckRepoActions.IS_REPO_ROOT))throw Error(`${o} is not a git repository!!!`);if(e.updateSubmodules&&(await r.submoduleInit(),await r.submoduleUpdate()),await r.fetch(),e.branch){let m=!1,g=await r.branchLocal();for(var i of g.all)if(i===e.branch){m=!0;break}let c=e.branch??"",f=e.startPoint??"";m?(g.current!==e.branch&&await r.checkout(c),await r.reset(A.ResetMode.HARD,[f])):await r.checkoutBranch(c,f)}};var we={"git-setup":yt,cmd:mt,"set-var":pt,output:ot,symlink:dt,"fs-copy":rt,"fs-del":tt,"fs-mkdir":Xe,"env-var":ct,"sub-tasks":Ke,"content-replace":Be};var j=require("es-toolkit"),_e=async(t,e,o,r)=>{let s=Ge.parse(o),i=e.cwdMode?e.cwdMode===$:s.env.cwdMode===$,m,g=s.env.logLevel,c=s.env.varReplaceRegex,f=s.env.envReplaceRegex;e.logLevel&&P.includes(e.logLevel)&&(g=e.logLevel),g==="debug"?(m=`${z},${W},${re}`,m=`${m},simple-git,simple-git:*`):g==="info"&&(m=`${z},${W}`),m&&ht.default.enable(m),a("CLI Options",e);let l=ce.default.resolve(process.cwd()),y={os:{platform:process.platform,architecture:process.arch,machine:xt.default.machine()},originCwd:t,baseCwd:l,varReplaceRegex:new RegExp(c),envVarReplaceRegex:new RegExp(f),systemVars:{__env:{cwd_startup:t,cwd_base:l}},vars:{},opts:e,program:r};e.extraArgs&&(a("Setting up the variables from the additional arguments"),ye(e.extraArgs,Ve,e.camelKeys,(u,k)=>{H(y,u,k,!1)}),a("Setting up the environment variables from the additional arguments"),ye(e.extraArgs,Me,e.camelKeys,(u,k)=>{B(y,u,k,!1)})),w(""),w(`[${s.name}] Start task processing`);let T=(u,k)=>k!=null?u.id!==void 0?`[${k}]${u.id}/${u.type}`:`[${k}]${u.type}`:u.id!==void 0?`${u.id}/${u.type}`:`${u.type}`,v=async()=>{let u=(s.tasks??[]).map(Le);for(let h=0;h<u.length;h++){let p=u[h];if((0,j.isNotNil)(p.id))for(let x=h+1;x<u.length;x++){let S=u[x];if(S.id!==void 0&&S.id===p.id)throw new Error(`The task id '${p.id}' must be unique`)}if(!p.type||!(p.type in we))throw new Error(`Found the invalid task type '${p.type}'`);p.id&&p.__compare__elements.push(p.id),p.tags&&p.__compare__elements.push(...p.tags)}if(e.exclude&&e.exclude.length>0){let h=e.exclude;a(`Excluding tasks by specified IDs or Tags : --exclude=${h}`),u=u.filter(p=>{if(de(h,p.__compare__elements)===!1)return p})}if(u=u.filter(h=>{if((0,j.isNil)(h.when))return!0;let{platform:p,architecture:x,machine:S}=h.when;if((0,j.isNotNil)(p)){if(p.startsWith("!")){if(p.substring(1)===y.os.platform)return!1}else if(p!==y.os.platform)return!1}if((0,j.isNotNil)(x)){if(x.startsWith("!")){if(x.substring(1)===y.os.architecture)return!1}else if(x!==y.os.architecture)return!1}if((0,j.isNotNil)(S)){if(S.startsWith("!")){if(S.substring(1)===y.os.machine)return!1}else if(S!==y.os.machine)return!1}return!0}),e.excludeCta&&e.excludeCta.length>0){let h=e.excludeCta;a(`Excluding tasks by specified IDs or Tags : --exclude-cta=${h}`),u=u.filter(p=>{if(ge(h,p.__compare__elements)===!1)return p})}let k=e.include&&e.include.length>0,D=e.includeCta&&e.includeCta.length>0;if(k||D){let h=e.include,p=e.includeCta;a(`Including tasks by specified IDs or Tags : --include=${h} / --include-cta=${p}`),u=u.filter(x=>{if(k&&de(h,x.__compare__elements)===!0||D&&ge(p,x.__compare__elements)===!0)return x})}w(`Tasks : ${u.map((h,p)=>T(h,p))}`);let bt=u.length??0;for(let h=0;h<bt;h++){let p=u[h];await ze(y,p);let x=T(p,h);if(p.enabled===!1){w(`
### Skip the task without execution => ${x}`);continue}else w(`
### Task : ${x}`);p.comment&&w(p.comment);let S=!1;if(p.cwd){let L=ce.default.resolve(p.cwd);w(`Changing the current working directory => ${L}`),S=!0,process.chdir(L)}let vt=we[p.type];try{await vt(y,p)}catch(L){if(p.onError==="skip")a(`Skip the failed task => ${x}`,L);else if(p.onError==="warn")oe(`Warn about the failed task => ${x}`,L);else throw L}i||(S&&w(`Restoring the current working directory => ${l}`),process.chdir(l))}},C=!1,Z;try{await v()}catch(u){C=!0,Z=u}if(C)throw Z;process.chdir(l),w(`[${s.name}] Tasks done
`)},q=(t,e,o)=>{let r={},s=ce.default.resolve(e.config);try{r=me(s)}catch(i){i instanceof Error?console.log(i.message):console.log(i),console.log(""),o.help()}return _e(t,e,r,o)};var ln=kt.default.resolve(process.cwd()),Tt=ee();q(ln,Tt.opt,Tt.program);0&&(module.exports={initUsefulTasks,usefulTasks});
//# sourceMappingURL=index.js.map